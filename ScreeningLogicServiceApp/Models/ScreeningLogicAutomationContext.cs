// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ScreeningLogicServiceApp.Models;

public partial class ScreeningLogicAutomationContext : DbContext
{
    public ScreeningLogicAutomationContext(DbContextOptions<ScreeningLogicAutomationContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Configuration> Configurations { get; set; }

    public virtual DbSet<JusticeExchangeBatch> JusticeExchangeBatches { get; set; }

    public virtual DbSet<JusticeLogicPersonSummaryLink> JusticeLogicPersonSummaryLinks { get; set; }

    public virtual DbSet<PersonAlias> PersonAliases { get; set; }

    public virtual DbSet<PersonRecord> PersonRecords { get; set; }

    public virtual DbSet<PersonSummary> PersonSummaries { get; set; }

    public virtual DbSet<ProcessStartAndStop> ProcessStartAndStops { get; set; }

    public virtual DbSet<ScreeningLogicBatch> ScreeningLogicBatches { get; set; }

    public virtual DbSet<ScreeningLogicScrapping> ScreeningLogicScrappings { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.HasKey(e => e.ConfigId);

            entity.ToTable("Configuration");

            entity.Property(e => e.ConfigKey)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfigValue)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<JusticeExchangeBatch>(entity =>
        {
            entity.ToTable("JusticeExchangeBatch");

            entity.Property(e => e.EndDateTime).HasColumnType("datetime");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.ScreeningLogicBatch).WithMany(p => p.JusticeExchangeBatches)
                .HasForeignKey(d => d.ScreeningLogicBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JusticeExchangeBatch_ScreeningLogicBatch");
        });

        modelBuilder.Entity<JusticeLogicPersonSummaryLink>(entity =>
        {
            entity.Property(e => e.SummaryLink).IsRequired();

            entity.HasOne(d => d.ScreeningLogicScrapping).WithMany(p => p.JusticeLogicPersonSummaryLinks)
                .HasForeignKey(d => d.ScreeningLogicScrappingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JusticeLogicPersonSummaryLinks_ScreeningLogicScrapping");
        });

        modelBuilder.Entity<PersonAlias>(entity =>
        {
            entity.ToTable("PersonAlias");

            entity.Property(e => e.Alias)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.PersonRecord).WithMany(p => p.PersonAliases)
                .HasForeignKey(d => d.PersonRecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonAlias_PersonRecord");
        });

        modelBuilder.Entity<PersonRecord>(entity =>
        {
            entity.ToTable("PersonRecord");

            entity.Property(e => e.Agency)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Dob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecordDate)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RecordDescription)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.RecordDetailLink).IsRequired();
            entity.Property(e => e.RecordNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecordType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ssn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SSN");

            entity.HasOne(d => d.PersonSummary).WithMany(p => p.PersonRecords)
                .HasForeignKey(d => d.PersonSummaryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonRecord_PersonSummary");
        });

        modelBuilder.Entity<PersonSummary>(entity =>
        {
            entity.ToTable("PersonSummary");

            entity.Property(e => e.Dob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.Firstname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Middlename)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ssn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SSN");

            entity.HasOne(d => d.JusticeLogicPersonSummaryLink).WithMany(p => p.PersonSummaries)
                .HasForeignKey(d => d.JusticeLogicPersonSummaryLinkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PersonSummary_JusticeLogicPersonSummaryLinks");
        });

        modelBuilder.Entity<ProcessStartAndStop>(entity =>
        {
            entity.HasKey(e => e.ProcessStartAndStopId).HasName("PK__ProcessS__1478B11C4C92DA14");

            entity.ToTable("ProcessStartAndStop");
        });

        modelBuilder.Entity<ScreeningLogicBatch>(entity =>
        {
            entity.ToTable("ScreeningLogicBatch");

            entity.Property(e => e.EndDateTime).HasColumnType("datetime");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ScreeningLogicScrapping>(entity =>
        {
            entity.ToTable("ScreeningLogicScrapping");

            entity.Property(e => e.Dob)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("DOB");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MiddleName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScrappedLink).IsRequired();
            entity.Property(e => e.ScrappingDate).HasColumnType("datetime");
            entity.Property(e => e.SentToBackgroundScreeningDate).HasColumnType("datetime");
            entity.Property(e => e.Ssn)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SSN");
            entity.Property(e => e.SubOrderId)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ScreeningLogicBatch).WithMany(p => p.ScreeningLogicScrappings)
                .HasForeignKey(d => d.ScreeningLogicBatchId)
                .HasConstraintName("FK_ScreeningLogicScrapping_ScreeningLogicBatch");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}